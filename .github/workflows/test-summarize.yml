name: Test Summarize Tool

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test-summarize:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Ubuntu-latest, macOS-latest]
        go-version: ['1.24.0']
      fail-fast: false  # Continue testing all combinations even if one fails

    steps:
      # Step 1: Check out the repository containing the summarize tool
      - name: Test 1 Step 1 Checkout summarize repository
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Test 1 Step 2 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Change directories
        shell: bash
        run: |
          cd ${{ github.workspace }}

      # Step 3: Build the summarize tool
      - name: Test 1 Step 3 Build summarize
        run: go build -o summarize .
        shell: bash


      # Test 1: Command-Line Arguments Usage
      # Step 4: Create another project directory with a sample file
      - name: Test 1 Step 4 Create another project directory
        run: |
          mkdir -p ${{ github.workspace }}/anotherProject
          echo -e "package main\n\nfunc main() {\n    println(\"Hello, World!\")\n}" > ${{ github.workspace }}/anotherProject/hello.go
        shell: bash

      - name: Test 1 Step 5 Run summarize with command-line arguments
        run: |
          cd ${{ github.workspace }}
          ${{ github.workspace }}/summarize -d anotherProject -o ${{ github.workspace }}/summaries
          ls -lh ${{ github.workspace }}/summaries/
        shell: bash

      # Step 6: Find the generated summary file (command-line usage)
      - name: Test 1 Step 6 Find summary file (command-line usage)
        id: find-summary-cli
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"
        shell: bash

      # Step 7: Verify the summary file size (command-line usage)
      - name: Test 1 Step 7 Verify summary file size (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(python3 -c "import os; print(os.path.getsize('$SUMMARY_FILE'))")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "Error: Summary file is less than 100 bytes ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 100 bytes"
        shell: bash

      # Step 8: Debug - Output the summary file contents
      - name: Test 1 Step 8 Debug - Output summary file contents (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          echo "Contents of $SUMMARY_FILE:"
          cat "$SUMMARY_FILE"
        shell: bash
