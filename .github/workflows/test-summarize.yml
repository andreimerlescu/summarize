name: Test Summarize Tool

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test-summarize:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Ubuntu-latest, macOS-latest, Windows-latest]
        go-version: ['1.23.0', '1.23.1', '1.23.3', '1.23.4', '1.23.5', '1.23.6', '1.23.7', '1.23.8', '1.24.0', '1.24.1', '1.24.2']
      fail-fast: false  # Continue testing all combinations even if one fails

    steps:
      # Step 1: Check out the repository containing the summarize tool
      - name: Test 1 Step 1 Checkout summarize repository
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Test 1 Step 2 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      # Step 3: Build the summarize tool
      - name: Test 1 Step 3 Build summarize
        run: go build -o summarize${{ matrix.os == 'Windows-latest' && '.exe' || '' }} .

      # Test 1: Command-Line Arguments Usage
      # Step 4: Create another project directory with a sample file
      - name: Test 1 Step 4 Create another project directory
        run: |
          mkdir -p ${{ github.workspace }}/anotherProject
          echo -e "package main\n\nfunc main() {\n    println(\"Hello, World!\")\n}" > ${{ github.workspace }}/anotherProject/hello.go
          mkdir -p ${{ github.workspace }}/summaries
        shell: bash

      # Step 5: Run summarize with command-line arguments
      - name: Test 1 Step 5 Run summarize with command-line arguments
        run: |
          cd ${{ github.workspace }}/anotherProject
          ${{ github.workspace }}/summarize${{ matrix.os == 'Windows-latest' && '.exe' || '' }} -d . -o ${{ github.workspace }}/summaries
          ls -lh ${{ github.workspace }}/summaries/
        shell: bash

      # Step 6: Find the generated summary file (command-line usage)
      - name: Test 1 Step 6 Find summary file (command-line usage)
        id: find-summary-cli
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"
        shell: bash

      # Step 7: Verify the summary file size (command-line usage)
      - name: Test 1 Step 7 Verify summary file size (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(python3 -c "import os; print(os.path.getsize('$SUMMARY_FILE'))")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "Error: Summary file is less than 100 bytes ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 100 bytes"
        shell: bash

      # Step 8: Debug - Output the summary file contents
      - name: Test 1 Step 8 Debug - Output summary file contents (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          echo "Contents of $SUMMARY_FILE:"
          cat "$SUMMARY_FILE"
        shell: bash

      # Step 9: Verify the summary contains the hello.go source code
      - name: Test 1 Step 9 Verify summary contains hello.go source code (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          RANDOM_FILE="hello.go"
          RANDOM_FILE_ABS="${{ github.workspace }}/anotherProject/hello.go"
          echo "Checking if $SUMMARY_FILE contains the source code of $RANDOM_FILE"

          SECTION_START=$(grep -n "^## $RANDOM_FILE$" "$SUMMARY_FILE" | cut -d: -f1)
          if [ -z "$SECTION_START" ]; then
            echo "Error: Could not find section for $RANDOM_FILE in $SUMMARY_FILE"
            echo "Listing all section headers in $SUMMARY_FILE:"
            grep "^## " "$SUMMARY_FILE"
            exit 1
          fi

          CODE_START=$((SECTION_START + 2))
          CODE_END=$(tail -n +$CODE_START "$SUMMARY_FILE" | grep -n "^\`\`\`$" | head -n 1 | cut -d: -f1 || true)
          if [ -z "$CODE_END" ] || [ "$CODE_END" -eq 0 ]; then
            echo "Error: Could not find code block end for $RANDOM_FILE in $SUMMARY_FILE"
            echo "Dumping lines after section start for debugging (up to 20 lines):"
            tail -n +$SECTION_START "$SUMMARY_FILE" | head -n 20
            exit 1
          fi
          CODE_LINES=$((CODE_END - 1))
          if [ $CODE_LINES -le 0 ]; then
            echo "Error: Invalid code block length ($CODE_LINES lines) for $RANDOM_FILE"
            echo "Dumping lines after section start for debugging (up to 20 lines):"
            tail -n +$SECTION_START "$SUMMARY_FILE" | head -n 20
            exit 1
          fi
          tail -n +$CODE_START "$SUMMARY_FILE" > temp_code_block.txt
          head -n $CODE_LINES temp_code_block.txt > extracted_code.txt
          rm temp_code_block.txt

          cat "$RANDOM_FILE_ABS" > original_code.txt

          diff -wB extracted_code.txt original_code.txt > diff_output.txt
          if [ $? -ne 0 ]; then
            echo "Error: The source code in the summary does not match the original file"
            cat diff_output.txt
            exit 1
          fi
          echo "Success: The source code of $RANDOM_FILE in $SUMMARY_FILE matches the original file"
        shell: bash

      # Test 2: Config File Usage
      # Step 10: Create a config file for summarize
      - name: Test 2 Step 10 Create summarize config file
        run: |
          mkdir -p ${{ github.workspace }}/config
          cat <<EOF > ${{ github.workspace }}/config/summarize.config.yaml
          {"i": "go,sh,ts", "d": "${{ github.workspace }}/anotherProject", "o": "${{ github.workspace }}/config-summaries"}
          EOF
          cat ${{ github.workspace }}/config/summarize.config.yaml
        shell: bash

      # Step 11: Run summarize with config file
      - name: Test 2 Step 11 Run summarize with config file
        env:
          SUMMARIZE_CONFIG_FILE: ${{ github.workspace }}/config/summarize.config.yaml
        run: |
          cd ${{ github.workspace }}/anotherProject
          ${{ github.workspace }}/summarize${{ matrix.os == 'Windows-latest' && '.exe' || '' }}
          ls -lh ${{ github.workspace }}/config-summaries/
        shell: bash

      # Step 12: Find the generated summary file (config usage)
      - name: Test 2 Step 12 Find summary file (config usage)
        id: find-summary-config
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/config-summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"
        shell: bash

      # Step 13: Verify the summary file size (config usage)
      - name: Test 2 Step 13 Verify summary file size (config usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-config.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(python3 -c "import os; print(os.path.getsize('$SUMMARY_FILE'))")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "Error: Summary file is less than 100 bytes ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 100 bytes"
        shell: bash

      # Step 14: Verify the summary contains the hello.go source code (config usage)
      - name: Test 2 Step 14 Verify summary contains hello.go source code (config usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-config.outputs.summary_file }}"
          RANDOM_FILE="hello.go"
          RANDOM_FILE_ABS="${{ github.workspace }}/anotherProject/hello.go"
          echo "Checking if $SUMMARY_FILE contains the source code of $RANDOM_FILE"

          SECTION_START=$(grep -n "^## $RANDOM_FILE$" "$SUMMARY_FILE" | cut -d: -f1)
          if [ -z "$SECTION_START" ]; then
            echo "Error: Could not find section for $RANDOM_FILE in $SUMMARY_FILE"
            echo "Listing all section headers in $SUMMARY_FILE:"
            grep "^## " "$SUMMARY_FILE"
            exit 1
          fi

          CODE_START=$((SECTION_START + 2))
          CODE_END=$(tail -n +$CODE_START "$SUMMARY_FILE" | grep -n "^\`\`\`$" | head -n 1 | cut -d: -f1 || true)
          if [ -z "$CODE_END" ] || [ "$CODE_END" -eq 0 ]; then
            echo "Error: Could not find code block end for $RANDOM_FILE in $SUMMARY_FILE"
            echo "Dumping lines after section start for debugging (up to 20 lines):"
            tail -n +$SECTION_START "$SUMMARY_FILE" | head -n 20
            exit 1
          fi
          CODE_LINES=$((CODE_END - 1))
          if [ $CODE_LINES -le 0 ]; then
            echo "Error: Invalid code block length ($CODE_LINES lines) for $RANDOM_FILE"
            echo "Dumping lines after section start for debugging (up to 20 lines):"
            tail -n +$SECTION_START "$SUMMARY_FILE" | head -n 20
            exit 1
          fi
          tail -n +$CODE_START "$SUMMARY_FILE" > temp_code_block.txt
          head -n $CODE_LINES temp_code_block.txt > extracted_code.txt
          rm temp_code_block.txt

          cat "$RANDOM_FILE_ABS" > original_code.txt

          diff -wB extracted_code.txt original_code.txt > diff_output.txt
          if [ $? -ne 0 ]; then
            echo "Error: The source code in the summary does not match the original file"
            cat diff_output.txt
            exit 1
          fi
          echo "Success: The source code of $RANDOM_FILE in $SUMMARY_FILE matches the original file"
        shell: bash

      # Test 3: Verify Output Structure
      # Step 15: Verify the summary file structure (command-line usage)
      - name: Test 3 Step 15 Verify summary file structure (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          grep -q "^# Project Summary" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain the expected header '# Project Summary'"
            exit 1
          fi

          grep -q "^## .*\.\(go\|ts\|tf\|sh\|py\|js\)$" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain any sections with the format '## filename.ext'"
            exit 1
          fi

          grep -q "```\(go\|ts\|tf\|sh\|py\|js\)" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain any code blocks with the expected language markers"
            exit 1
          fi
          echo "Success: Summary file structure is correct"
        shell: bash