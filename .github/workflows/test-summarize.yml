name: Test Summarize Tool

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test-summarize:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository containing the summarize tool
      - name: Checkout summarize repository
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'

      # Step 3: Build the summarize tool
      - name: Build summarize
        run: go build -o summarize .

      # Step 4: Clone the figtree repository
      - name: Clone figtree repository
        run: git clone https://github.com/andreimerlescu/figtree.git ${{ github.workspace }}/figtree

      # Test 1: Basic Usage
      # Step 5: Navigate into the figtree directory and run summarize
      - name: Run summarize on figtree (basic usage)
        run: |
          cd ${{ github.workspace }}/figtree
          ${{ github.workspace }}/summarize
          ls -lh summaries/

      # Step 6: Find the generated summary file (basic usage)
      - name: Find summary file (basic usage)
        id: find-summary-basic
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/figtree/summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"

      # Step 7: Verify the summary file size is over 1KB
      - name: Verify summary file size (basic usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-basic.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(stat -c %s "$SUMMARY_FILE")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 1024 ]; then
            echo "Error: Summary file is less than 1KB ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 1KB"

      # Step 7.1: Debug - Output the summary file contents
      - name: Debug - Output summary file contents
        run: |
          SUMMARY_FILE="${{ steps.find-summary-basic.outputs.summary_file }}"
          echo "Contents of $SUMMARY_FILE:"
          cat "$SUMMARY_FILE"

      # Step 8: Select a random Go file from the figtree directory
      - name: Select a random Go file (basic usage)
        id: select-file-basic
        run: |
          cd ${{ github.workspace }}/figtree
          RANDOM_FILE=$(find . -type f -name "*.go" | shuf -n 1)
          # Convert to absolute path
          RANDOM_FILE_ABS="${{ github.workspace }}/figtree/$RANDOM_FILE"
          echo "random_file=$RANDOM_FILE" >> $GITHUB_OUTPUT
          echo "random_file_abs=$RANDOM_FILE_ABS" >> $GITHUB_OUTPUT
          echo "Selected random file: $RANDOM_FILE"
          echo "Absolute path of random file: $RANDOM_FILE_ABS"

      # Step 9: Verify the summary contains the source code of the random file
      - name: Verify summary contains random file's source code (basic usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-basic.outputs.summary_file }}"
          RANDOM_FILE="${{ steps.select-file-basic.outputs.random_file }}"
          RANDOM_FILE_ABS="${{ steps.select-file-basic.outputs.random_file_abs }}"
          echo "Checking if $SUMMARY_FILE contains the source code of $RANDOM_FILE"

          # Normalize the file path for matching (remove leading ./ if present)
          NORMALIZED_RANDOM_FILE=$(echo "$RANDOM_FILE" | sed 's|^\./||')

          # Extract the section for the random file from the summary
          SECTION_START=$(grep -n "^## $NORMALIZED_RANDOM_FILE$" "$SUMMARY_FILE" | cut -d: -f1)
          if [ -z "$SECTION_START" ]; then
            echo "Error: Could not find section for $NORMALIZED_RANDOM_FILE in $SUMMARY_FILE"
            echo "Looking for alternative path formats..."
            # Try matching without the directory path (just the filename)
            FILENAME=$(basename "$RANDOM_FILE")
            SECTION_START=$(grep -n "^## $FILENAME$" "$SUMMARY_FILE" | cut -d: -f1)
            if [ -z "$SECTION_START" ]; then
              echo "Error: Could not find section for $FILENAME in $SUMMARY_FILE either"
              echo "Listing all section headers in $SUMMARY_FILE:"
              grep "^## " "$SUMMARY_FILE"
              exit 1
            fi
            echo "Found section for $FILENAME instead"
            NORMALIZED_RANDOM_FILE="$FILENAME"
          fi

          # Extract the code block (between ``` and ```)
          CODE_START=$((SECTION_START + 2))
          CODE_END=$(tail -n +$CODE_START "$SUMMARY_FILE" | grep -n "^\`\`\`$" | head -n 1 | cut -d: -f1)
          if [ -z "$CODE_END" ]; then
            echo "Error: Could not find code block end for $NORMALIZED_RANDOM_FILE in $SUMMARY_FILE"
            exit 1
          fi
          CODE_LINES=$(($CODE_END - 1))
          tail -n +$CODE_START "$SUMMARY_FILE" | head -n $CODE_LINES > extracted_code.txt

          # Read the original file content
          cat "$RANDOM_FILE_ABS" > original_code.txt

          # Compare
          diff -wB extracted_code.txt original_code.txt > diff_output.txt
          if [ $? -ne 0 ]; then
            echo "Error: The source code in the summary does not match the original file"
            cat diff_output.txt
            exit 1
          fi
          echo "Success: The source code of $NORMALIZED_RANDOM_FILE in $SUMMARY_FILE matches the original file"

      # Test 2: Config File Usage
      - name: Create summarize config file
        run: |
          mkdir -p ${{ github.workspace }}/config
          cat <<EOF > ${{ github.workspace }}/config/summarize.config.yaml
          {"i": "go,sh,ts", "d": "${{ github.workspace }}/figtree", "o": "${{ github.workspace }}/figtree/config-summaries"}
          EOF
          cat ${{ github.workspace }}/config/summarize.config.yaml

      - name: Run summarize with config file
        env:
          SUMMARIZE_CONFIG_FILE: ${{ github.workspace }}/config/summarize.config.yaml
        run: |
          cd ${{ github.workspace }}/figtree
          ${{ github.workspace }}/summarize
          ls -lh config-summaries/

      - name: Find summary file (config usage)
        id: find-summary-config
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/figtree/config-summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"

      - name: Verify summary file size (config usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-config.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(stat -c %s "$SUMMARY_FILE")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 1024 ]; then
            echo "Error: Summary file is less than 1KB ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 1KB"

      # Test 3: Command-Line Arguments Usage
      - name: Create another project directory
        run: |
          mkdir -p ${{ github.workspace }}/anotherProject
          echo -e "package main\n\nfunc main() {\n    println(\"Hello, World!\")\n}" > ${{ github.workspace }}/anotherProject/hello.go
          mkdir -p ${{ github.workspace }}/custom-summaries

      - name: Run summarize with command-line arguments
        run: |
          cd ${{ github.workspace }}/anotherProject
          ${{ github.workspace }}/summarize -d . -o ${{ github.workspace }}/custom-summaries
          ls -lh ${{ github.workflow }}/custom-summaries/

      - name: Find summary file (command-line usage)
        id: find-summary-cli
        run: |
          SUMMARY_FILE=$(ls ${{ github.workspace }}/custom-summaries/summary.*.md | head -n 1)
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "Found summary file: $SUMMARY_FILE"

      - name: Verify summary file size (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo "Error: Summary file $SUMMARY_FILE not found"
            exit 1
          fi
          FILE_SIZE=$(stat -c %s "$SUMMARY_FILE")
          echo "Summary file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -lt 1024 ]; then
            echo "Error: Summary file is less than 1KB ($FILE_SIZE bytes)"
            exit 1
          fi
          echo "Summary file size is $FILE_SIZE bytes, which is greater than 1KB"

      - name: Verify summary contains hello.go source code (command-line usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-cli.outputs.summary_file }}"
          RANDOM_FILE="hello.go"
          RANDOM_FILE_ABS="${{ github.workspace }}/anotherProject/hello.go"
          echo "Checking if $SUMMARY_FILE contains the source code of $RANDOM_FILE"

          SECTION_START=$(grep -n "^## $RANDOM_FILE$" "$SUMMARY_FILE" | cut -d: -f1)
          if [ -z "$SECTION_START" ]; then
            echo "Error: Could not find section for $RANDOM_FILE in $SUMMARY_FILE"
            exit 1
          fi

          CODE_START=$((SECTION_START + 2))
          CODE_END=$(tail -n +$CODE_START "$SUMMARY_FILE" | grep -n "^\`\`\`$" | head -n 1 | cut -d: -f1)
          if [ -z "$CODE_END" ]; then
            echo "Error: Could not find code block end for $RANDOM_FILE in $SUMMARY_FILE"
            exit 1
          fi
          CODE_LINES=$(($CODE_END - 1))
          tail -n +$CODE_START "$SUMMARY_FILE" | head -n $CODE_LINES > extracted_code.txt

          cat "$RANDOM_FILE_ABS" > original_code.txt

          diff -wB extracted_code.txt original_code.txt > diff_output.txt
          if [ $? -ne 0 ]; then
            echo "Error: The source code in the summary does not match the original file"
            cat diff_output.txt
            exit 1
          fi
          echo "Success: The source code of $RANDOM_FILE in $SUMMARY_FILE matches the original file"

      # Test 4: Verify Output Structure
      - name: Verify summary file structure (basic usage)
        run: |
          SUMMARY_FILE="${{ steps.find-summary-basic.outputs.summary_file }}"
          grep -q "^# Project Summary" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain the expected header '# Project Summary'"
            exit 1
          fi

          grep -q "^## .*\.\(go\|ts\|tf\|sh\|py\|js\)$" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain any sections with the format '## filename.ext'"
            exit 1
          fi

          grep -q "```\(go\|ts\|tf\|sh\|py\|js\)" "$SUMMARY_FILE"
          if [ $? -ne 0 ]; then
            echo "Error: Summary file does not contain any code blocks with the expected language markers"
            exit 1
          fi
          echo "Success: Summary file structure is correct"